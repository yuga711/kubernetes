{
"apiVersion": "v1",
"kind": "Pod",
"metadata": {
  "name":"etcd-server{{ suffix }}",
  "namespace": "kube-system",
  "annotations": {
    "seccomp.security.alpha.kubernetes.io/pod": "docker/default"
  }
},
"spec":{
"priorityClassName": "system-node-critical",
"priority": 2000001000,
"hostNetwork": true,
"containers":[
    {
    "name": "etcd-container",
    "image": "{{ pillar.get('etcd_docker_repository', 'k8s.gcr.io/etcd') }}:{{ pillar.get('etcd_docker_tag', '3.4.13-0') }}",
    "resources": {
      "requests": {
        "cpu": {{ cpulimit }}
      }
    },
    "command": [
              "/bin/sh",
              "-c",
              "set -o errexit; exec 1>>${ETCD_LOG_FILE} 2>&1; ETCD_FLAGS=( --name=etcd-${ETCD_HOSTNAME} --listen-peer-urls=${LISTEN_PEER_URLS} --initial-advertise-peer-urls=${INITIAL_ADVERTISE_PEER_URLS} --advertise-client-urls=${ADVERTISE_CLIENT_URLS} --listen-client-urls=${LISTEN_CLIENT_URLS} ${QUOTA_BYTES} --data-dir=${DATA_DIRECTORY} --initial-cluster-state=${INITIAL_CLUSTER_STATE} --initial-cluster=${INITIAL_CLUSTER} ${ETCD_EXTRA_ARGS}); if [ -e /usr/local/bin/etcd-main.sh ]; then source /usr/local/bin/etcd-main.sh; main \"${ETCD_FLAGS[@]}\"; else set -x; declare -x; echo 'DEPRECATED: Starting etcd legacy scripts...'; if [ -e /usr/local/bin/backup-before-start.sh ]; then /bin/sh /usr/local/bin/backup-before-start.sh; fi; if [ -e /usr/local/bin/migrate-if-needed.sh ]; then /bin/sh /usr/local/bin/migrate-if-needed.sh; fi; exec /usr/local/bin/etcd \"${ETCD_FLAGS[@]}\"; fi;"
            ],
    "env": [
      { "name": "TARGET_STORAGE",
        "value": "{{ pillar.get('storage_backend', 'etcd3') }}"
      },
      { "name": "TARGET_VERSION",
        "value": "{{ pillar.get('etcd_version', '3.4.13') }}"
      },
      { "name": "DATA_DIRECTORY",
        "value": "/var/etcd/data{{ suffix }}"
      },
      { "name": "INITIAL_CLUSTER",
        "value": "{{ etcd_cluster }}"
      },
      { "name": "LISTEN_PEER_URLS",
        "value": "{{ etcd_protocol }}://{{ host_ip }}:{{ server_port }}"
      },
      { "name": "INITIAL_ADVERTISE_PEER_URLS",
        "value": "{{ etcd_protocol }}://{{ hostname }}:{{ server_port }}"
      },
      { "name": "ETCD_CREDS",
        "value": "{{ etcd_creds }}"
      },
      { "name": "ETCD_APISERVER_CREDS",
        "value": "{{ etcd_apiserver_creds }}"
      },
      { "name": "ETCD_SNAPSHOT_COUNT",
        "value": "10000"
      },
      { "name": "ETCD_HOSTNAME",
        "value": "{{ hostname }}"
      },
      { "name": "LISTEN_CLIENT_URLS",
        "value": "{{ etcd_apiserver_protocol }}://{{ listen_client_ip }}:{{ port }}"
      },
      { "name": "ADVERTISE_CLIENT_URLS",
        "value": "{{ etcd_apiserver_protocol }}://127.0.0.1:{{ port }}"
      },
      { "name": "QUOTA_BYTES",
        "value": "{{ quota_bytes }}"
      },
      { "name": "INITIAL_CLUSTER_STATE",
        "value": "{{ cluster_state }}"
      },
      { "name": "ETCD_EXTRA_ARGS",
        "value": "{{ etcd_creds }} {{ etcd_apiserver_creds }} {{ etcd_extra_args }}"
      },
      {
        "name": "ETCD_LOG_FILE",
        "value": "/var/log/etcd{{ suffix }}.log"
      }
        ],
    "livenessProbe": {
      "httpGet": {
        "host": "127.0.0.1",
        "port": {{ etcd_livenessprobe_port }},
        "path": "/health"
      },
      "initialDelaySeconds": {{ liveness_probe_initial_delay }},
      "timeoutSeconds": 15
    },
    "ports": [
      { "name": "serverport",
        "containerPort": {{ server_port }},
        "hostPort": {{ server_port }}
      },
      { "name": "clientport",
        "containerPort": {{ port }},
        "hostPort": {{ port }}
      }
        ],
    "volumeMounts": [
      { "name": "varetcd",
        "mountPath": "/var/etcd",
        "readOnly": false
      },
      { "name": "varlogetcd",
        "mountPath": "/var/log/etcd{{ suffix }}.log",
        "readOnly": false
      },
      { "name": "etc",
        "mountPath": "/etc/srv/kubernetes",
        "readOnly": false
      }
    ]
    }
],
"volumes":[
  { "name": "varetcd",
    "hostPath": {
        "path": "/mnt/master-pd/var/etcd"}
  },
  { "name": "varlogetcd",
    "hostPath": {
        "path": "/var/log/etcd{{ suffix }}.log",
        "type": "FileOrCreate"}
  },
  { "name": "etc",
    "hostPath": {
        "path": "/etc/srv/kubernetes"}
  }
]
}}
